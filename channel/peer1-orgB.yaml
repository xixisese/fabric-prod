version: "3"

volumes:
  etc-peer1-orgB:
  var-peer1-orgB:

networks:
  mhnet:
    external: true

      
services:
  peer1-orgB:
    container_name: peer1-orgB
    image: hyperledger/fabric-peer:2.2.4
    environment:
        # MSPID, 本组织的OrgID，等同于configtx.yaml中配置的Organization的ID
        - CORE_PEER_LOCALMSPID=OrgB
        # 本peer的msp路径 
        - CORE_PEER_MSPCONFIGPATH=/etc/hyperledger/fabric/mymsp


        # Docker虚拟机的地址，在peer创建chaincode虚拟机时使用，在mac/windows上配置如下 
        - CORE_VM_ENDPOINT=unix:///var/run/docker.sock
        # 设置chaincode的网络,一般设置和本peer网络一样  
        - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=mhnet
        # 日志等级
        - FABRIC_LOGGING_SPEC=INFO
         
        # TLS通讯证书配置
        - CORE_PEER_TLS_ENABLED=true
        - CORE_PEER_PROFILE_ENABLED=false
        - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/peer1-orgB.crt
        - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/peer1-orgB.key
        - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/root-orgB.crt

        # Peer 端口配置
        - CORE_PEER_ID=peer1.orgB
        - CORE_PEER_ADDRESS=peer1.orgB:8051
        - CORE_PEER_LISTENADDRESS=0.0.0.0:8051
        - CORE_PEER_CHAINCODEADDRESS=peer1.orgB:8151
        - CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:8151
        - CORE_PEER_GOSSIP_BOOTSTRAP=peer1.orgB:8051
        - CORE_PEER_GOSSIP_ENDPOINT=peer1.orgB:8051
        - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer1.orgB:8051

        # 监控配置          
        # 打开Prometheus服务
        - CORE_METRICS_PROVIDER=prometheus
        # 监控地址和端口 
        - CORE_OPERATIONS_LISTENADDRESS=0.0.0.0:18051   
          
    command: peer node start
    working_dir: /var/hyperledger/data
    
    hostname: peer1.orgB
    
    ports:
        - 8051:8051
        - 18051:18051

    volumes:
        # /var/run/docker.sock这个配置很关键，用于和上面的CORE_VM_ENDPOINT配合，指明docker程序的endpoint
        - /var/run/docker.sock:/var/run/docker.sock
        - etc-peer1-orgB:/etc/hyperledger/fabric
        - var-peer1-orgB:/var/hyperledger 

    networks:
        mhnet:
